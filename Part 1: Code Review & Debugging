from flask import request, jsonify
from models import db, Product, Inventory
from sqlalchemy.exc import SQLAlchemyError

@app.route('/api/products', methods=['POST'])
def create_product():
    data = request.get_json()

    #  Validate required fields
    required = ['name', 'sku', 'price', 'warehouse_id', 'initial_quantity']
    if not all(field in data for field in required):
        return jsonify({"error": "Missing required fields"}), 400

    try:
        #  Type conversion
        price = float(data['price'])
        warehouse_id = int(data['warehouse_id'])
        quantity = int(data['initial_quantity'])

        #  Optional: Check for duplicate SKU
        existing = Product.query.filter_by(sku=data['sku']).first()
        if existing:
            return jsonify({"error": "SKU already exists"}), 409

        #  Create product and inventory in one transaction
        product = Product(
            name=data['name'],
            sku=data['sku'],
            price=price,
            warehouse_id=warehouse_id
        )
        db.session.add(product)
        db.session.flush()  # Get product.id before commit

        inventory = Inventory(
            product_id=product.id,
            warehouse_id=warehouse_id,
            quantity=quantity
        )
        db.session.add(inventory)
        db.session.commit()

        return jsonify({
            "message": "Product created successfully",
            "product_id": product.id
        }), 201

    except (ValueError, SQLAlchemyError) as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500

#Issues Identified:

1. No Input Validation
- Problem: Assumes all required fields are present and correctly typed.
- Impact: Raises KeyError or stores invalid data (e.g., string in price).
- Fix: Validate required fields and types before using them.

2. No Error Handling
- Problem: If db.session.commit() fails, the app crashes.
- Impact: Partial data may be committed, leading to data inconsistency.
- Fix: Use try/except with rollback on failure.

3. Two Separate Commits
- Problem: Commits Product and Inventory separately.
- Impact: If the second commit fails, youâ€™ll have a product without inventory.
- Fix: Wrap both inserts in a single transaction.

4. No Type Conversion
- Problem: price, warehouse_id, and initial_quantity are used directly.
- Impact: If passed as strings, they may break DB constraints or cause silent bugs.
- Fix: Convert to float or int explicitly.

5. No Duplicate SKU Check
- Problem: Allows duplicate SKUs unless DB constraint exists.
- Impact: SKU collisions can break inventory tracking.
- Fix: Check for existing SKU before insert or enforce uniqueness in DB.

6. No Response Status Code
- Problem: Returns plain dict without HTTP status.
- Impact: Clients can't distinguish success from failure reliably.
- Fix: Use jsonify() with proper status codes.

